"use client";

import React, { useState, useRef, useEffect } from "react";
import { DefaultPageLayout } from "@/ui/layouts/DefaultPageLayout";
import { Button } from "@/ui/components/Button";
import { IconButton } from "@/ui/components/IconButton";
import { useAutoSave, AutoSaveIndicator } from "@/ui";
import { 
  FeatherType, 
  FeatherHash, 
  FeatherCpu, 
  FeatherX, 
  FeatherArrowLeft,
  FeatherEye,
  FeatherUser, 
  FeatherBarChart3, 
  FeatherClock, 
  FeatherTrendingUp, 
  FeatherPercent,
  FeatherMoreHorizontal,
  FeatherSparkles
} from "@subframe/core";

type BlockType = "text" | "heading" | "ai-prompt";

interface Block {
  id: string;
  type: BlockType;
  content: string;
  level?: number; // for headings
  placeholder?: string;
}

interface SlashCommandMenuProps {
  position: { x: number; y: number };
  onSelectBlock: (type: BlockType) => void;
  onClose: () => void;
}

const blockTypeConfig = {
  text: {
    icon: FeatherType,
    label: 'Text',
    description: 'Plain text with rich formatting',
    shortcut: 'T'
  },
  heading: {
    icon: FeatherHash,
    label: 'Header',
    description: 'Section header (H1, H2, H3)',
    shortcut: 'H'
  },
  'ai-prompt': {
    icon: FeatherSparkles,
    label: 'AI Block',
    description: 'Dynamic content generated by AI',
    shortcut: 'A'
  }
} as const;

function SlashCommandMenu({ position, onSelectBlock, onClose }: SlashCommandMenuProps) {
  const menuRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        onClose();
      }
    };

    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [onClose]);

  return (
    <div
      ref={menuRef}
      className="fixed z-50 bg-white border border-solid border-neutral-border rounded-lg shadow-xl py-2 min-w-[280px]"
      style={{ left: position.x, top: position.y }}
    >
      <div className="px-3 py-2 border-b border-neutral-100">
        <span className="text-caption-bold font-caption-bold text-neutral-600">
          Choose a block type
        </span>
      </div>
      {(Object.entries(blockTypeConfig) as Array<[BlockType, typeof blockTypeConfig[BlockType]]>).map(([type, config]) => {
        const IconComponent = config.icon;
        return (
          <button
            key={type}
            onClick={() => onSelectBlock(type)}
            className="w-full flex items-center gap-3 px-3 py-3 text-left hover:bg-neutral-50 transition-colors group"
          >
            <div className="flex items-center justify-center w-8 h-8 rounded-md bg-neutral-100 group-hover:bg-neutral-200 transition-colors">
              <IconComponent className="w-4 h-4 text-neutral-600" />
            </div>
            <div className="flex-1">
              <div className="text-body-bold font-body-bold text-default-font">
                {config.label}
              </div>
              <div className="text-caption font-caption text-subtext-color">
                {config.description}
              </div>
            </div>
            <div className="text-caption font-caption text-neutral-400 bg-neutral-100 px-2 py-1 rounded">
              {config.shortcut}
            </div>
          </button>
        );
      })}
    </div>
  );
}


interface VariableMenuProps {
  position: { x: number; y: number };
  onSelectVariable: (variable: string) => void;
  onClose: () => void;
}

function VariableMenu({ position, onSelectVariable, onClose }: VariableMenuProps) {
  const menuRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        onClose();
      }
    };

    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [onClose]);

  const variables = [
    { 
      key: 'user_name', 
      label: 'User Name', 
      description: 'Recipient\'s name',
      icon: FeatherUser,
      category: 'User'
    },
    { 
      key: 'metric_value', 
      label: 'Metric Value', 
      description: 'Current metric value',
      icon: FeatherBarChart3,
      category: 'Data'
    },
    { 
      key: 'time_period', 
      label: 'Time Period', 
      description: 'Analysis time frame',
      icon: FeatherClock,
      category: 'Time'
    },
    { 
      key: 'previous_value', 
      label: 'Previous Value', 
      description: 'Previous period value',
      icon: FeatherBarChart3,
      category: 'Data'
    },
    { 
      key: 'change_percentage', 
      label: 'Change %', 
      description: 'Percentage change',
      icon: FeatherPercent,
      category: 'Analysis'
    },
    { 
      key: 'trend_direction', 
      label: 'Trend Direction', 
      description: 'Up/down trend',
      icon: FeatherTrendingUp,
      category: 'Analysis'
    },
  ];

  return (
    <div
      ref={menuRef}
      className="fixed z-50 bg-white border border-solid border-neutral-border rounded-lg shadow-xl py-2 min-w-[320px] max-h-80 overflow-y-auto"
      style={{ left: position.x, top: position.y }}
    >
      <div className="px-3 py-2 border-b border-neutral-100">
        <span className="text-caption-bold font-caption-bold text-neutral-600">
          Insert variable
        </span>
      </div>
      {variables.map((variable) => {
        const IconComponent = variable.icon;
        return (
          <button
            key={variable.key}
            onClick={() => onSelectVariable(variable.key)}
            className="w-full flex items-center gap-3 px-3 py-3 text-left hover:bg-neutral-50 transition-colors group"
          >
            <div className="flex items-center justify-center w-8 h-8 rounded-md bg-brand-50 group-hover:bg-brand-100 transition-colors">
              <IconComponent className="w-4 h-4 text-brand-600" />
            </div>
            <div className="flex-1">
              <div className="flex items-center gap-2">
                <div className="text-body-bold font-body-bold text-default-font">
                  {variable.label}
                </div>
                <div className="text-caption font-caption text-neutral-400 bg-neutral-100 px-2 py-0.5 rounded">
                  {variable.category}
                </div>
              </div>
              <div className="text-caption font-caption text-subtext-color">
                {variable.description}
              </div>
            </div>
            <div className="text-caption font-caption text-neutral-400 font-mono">
              {`{{${variable.key}}}`}
            </div>
          </button>
        );
      })}
    </div>
  );
}

interface BlockComponentProps {
  block: Block;
  blocks: Block[];
  onUpdate: (id: string, updates: Partial<Block>) => void;
  onDelete: (id: string) => void;
  onAddBlock: (afterId: string, type: BlockType) => void;
  onShowSlashMenu: (blockId: string, position: { x: number; y: number }) => void;
  onShowVariableMenu: (blockId: string, position: { x: number; y: number }) => void;
  isActive: boolean;
}

function BlockComponent({ block, blocks, onUpdate, onDelete, onAddBlock, onShowSlashMenu, onShowVariableMenu }: BlockComponentProps) {
  const [isFocused, setIsFocused] = useState(false);
  const inputRef = useRef<HTMLTextAreaElement | HTMLInputElement>(null);

  // Ensure block type is valid
  const validBlockType = (['text', 'heading', 'ai-prompt'] as const).includes(block.type as BlockType) 
    ? block.type 
    : 'text' as BlockType;

  const handleKeyDown = (e: React.KeyboardEvent) => {
    const target = e.target as HTMLTextAreaElement | HTMLInputElement;
    const cursorPosition = target.selectionStart || 0;
    const textBeforeCursor = target.value.slice(0, cursorPosition);
    
    if (e.key === '/' && (cursorPosition === 0 || textBeforeCursor.endsWith(' ') || textBeforeCursor.endsWith('\n'))) {
      e.preventDefault();
      const rect = inputRef.current?.getBoundingClientRect();
      if (rect) {
        onShowSlashMenu(block.id, { x: rect.left, y: rect.bottom + 8 });
      }
    } else if (e.key === '@') {
      const rect = inputRef.current?.getBoundingClientRect();
      if (rect) {
        onShowVariableMenu(block.id, { x: rect.left, y: rect.bottom + 8 });
      }
    } else if (e.key === 'Enter' && !e.shiftKey && validBlockType !== 'ai-prompt') {
      e.preventDefault();
      onAddBlock(block.id, 'text');
    } else if (e.key === 'Backspace' && block.content === '' && cursorPosition === 0) {
      e.preventDefault();
      onDelete(block.id);
    }
  };

  const getBlockConfig = () => {
    return blockTypeConfig[validBlockType];
  };

  const getPlaceholder = () => {
    switch (validBlockType) {
      case 'text': return "Type '/' for block commands or start writing...";
      case 'heading': return "Enter heading text...";
      case 'ai-prompt': return "Describe what you want the AI to generate. Use @ to insert variables...";
      default: return "Start typing...";
    }
  };

  const getHeadingClass = () => {
    switch (block.level) {
      case 1: return 'text-heading-1 font-heading-1';
      case 2: return 'text-heading-2 font-heading-2';
      case 3: return 'text-heading-3 font-heading-3';
      default: return 'text-heading-2 font-heading-2';
    }
  };

  const [showMenu, setShowMenu] = useState(false);
  
  const renderBlockMenu = () => {
    
    return (
      <div className="relative">
        <button
          onClick={() => setShowMenu(!showMenu)}
          className="opacity-0 group-hover:opacity-100 transition-opacity p-1 hover:bg-neutral-100 rounded"
          title="Block options"
        >
          <FeatherMoreHorizontal className="w-4 h-4 text-neutral-400" />
        </button>
        
        {showMenu && (
          <div className="absolute top-full right-0 mt-1 bg-white border border-solid border-neutral-border rounded-lg shadow-lg py-2 min-w-[160px] z-50">
            <div className="px-3 py-2 border-b border-neutral-100">
              <span className="text-caption-bold font-caption-bold text-neutral-600">
                Change to
              </span>
            </div>
            {(Object.entries(blockTypeConfig) as Array<[BlockType, typeof blockTypeConfig[BlockType]]>).map(([type, typeConfig]) => {
              const IconComponent = typeConfig.icon;
              const isActive = type === validBlockType;
              return (
                <button
                  key={type}
                  onClick={() => {
                    onUpdate(block.id, { type, level: type === 'heading' ? 1 : undefined });
                    setShowMenu(false);
                  }}
                  className={`w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-neutral-50 transition-colors ${
                    isActive ? 'bg-neutral-50 text-brand-600' : ''
                  }`}
                >
                  <IconComponent className="w-4 h-4" />
                  <span className="text-body font-body">{typeConfig.label}</span>
                  {isActive && <span className="ml-auto text-caption text-brand-600">✓</span>}
                </button>
              );
            })}
            {validBlockType === 'heading' && (
              <>
                <div className="px-3 py-2 border-t border-neutral-100">
                  <span className="text-caption-bold font-caption-bold text-neutral-600">
                    Header size
                  </span>
                </div>
                {[1, 2, 3].map((level) => (
                  <button
                    key={level}
                    onClick={() => {
                      onUpdate(block.id, { level });
                      setShowMenu(false);
                    }}
                    className={`w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-neutral-50 transition-colors ${
                      block.level === level ? 'bg-neutral-50 text-brand-600' : ''
                    }`}
                  >
                    <span className="text-body font-body">H{level}</span>
                    {block.level === level && <span className="ml-auto text-caption text-brand-600">✓</span>}
                  </button>
                ))}
              </>
            )}
            <div className="border-t border-neutral-100">
              <button
                onClick={() => {
                  onDelete(block.id);
                  setShowMenu(false);
                }}
                className="w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-red-50 transition-colors text-red-600"
              >
                <FeatherX className="w-4 h-4" />
                <span className="text-body font-body">Delete block</span>
              </button>
            </div>
          </div>
        )}
      </div>
    );
  };

  const renderInput = () => {
    const baseClasses = `w-full border-none outline-none bg-transparent resize-none placeholder:text-neutral-400 transition-all`;
    
    if (validBlockType === 'heading') {
      return (
        <input
          ref={inputRef as React.RefObject<HTMLInputElement>}
          value={block.content}
          placeholder={getPlaceholder()}
          onChange={(e) => onUpdate(block.id, { content: e.target.value })}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          onKeyDown={handleKeyDown}
          className={`${baseClasses} ${getHeadingClass()} text-default-font`}
          aria-label={`Heading level ${block.level || 1} content`}
          role="textbox"
        />
      );
    }

    return (
      <textarea
        ref={inputRef as React.RefObject<HTMLTextAreaElement>}
        value={block.content}
        placeholder={getPlaceholder()}
        onChange={(e) => onUpdate(block.id, { content: e.target.value })}
        onFocus={() => setIsFocused(true)}
        onBlur={() => setIsFocused(false)}
        onKeyDown={handleKeyDown}
        rows={validBlockType === 'ai-prompt' ? 3 : 1}
        className={`${baseClasses} text-body font-body text-default-font ${
          validBlockType === 'ai-prompt' ? 'text-brand-700' : ''
        }`}
        style={{ minHeight: '1.5rem' }}
        onInput={(e) => {
          const target = e.target as HTMLTextAreaElement;
          target.style.height = 'auto';
          target.style.height = Math.max(24, target.scrollHeight) + 'px';
        }}
        aria-label={`${getBlockConfig().label} content`}
        role="textbox"
        aria-multiline={true}
      />
    );
  };

  const getBlockContainerClasses = () => {
    const baseClasses = `group flex items-start gap-3 py-2 px-2 -mx-2 rounded-lg transition-all`;
    
    if (validBlockType === 'ai-prompt') {
      return `${baseClasses} ${isFocused ? 'bg-brand-25 border border-brand-200' : 'bg-brand-25/50 border border-transparent hover:border-brand-100'}`;
    }
    
    return `${baseClasses} ${isFocused ? 'bg-neutral-25 border border-neutral-200' : 'border border-transparent hover:bg-neutral-25'}`;
  };

  const blockPosition = blocks.findIndex(b => b.id === block.id) + 1;
  const totalBlocks = blocks.length;

  return (
    <div 
      className={getBlockContainerClasses()}
      role="region"
      aria-label={`${getBlockConfig().label} block ${blockPosition} of ${totalBlocks}`}
    >
      <div className="flex-1 min-w-0">
        {renderInput()}
      </div>
      {renderBlockMenu()}
    </div>
  );
}

export default function DefineContent() {
  const [blocks, setBlocks] = useState<Block[]>([
    {
      id: '1',
      type: 'text',
      content: '',
    }
  ]);
  
  const [showSlashMenu, setShowSlashMenu] = useState(false);
  const [showVariableMenu, setShowVariableMenu] = useState(false);
  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0 });
  const [activeBlockId, setActiveBlockId] = useState<string | null>(null);

  // Auto-save functionality
  const { isSaving, lastSaved, error } = useAutoSave({
    data: blocks,
    onSave: async (data) => {
      // Simulate API call to save content
      await new Promise(resolve => setTimeout(resolve, 500));
      console.log('Saving content blocks:', data);
    },
    delay: 2000 // Save 2 seconds after last change
  });

  const addBlock = (afterId: string, type: BlockType) => {
    const newBlock: Block = {
      id: Date.now().toString(),
      type,
      content: '',
      level: type === 'heading' ? 1 : undefined,
    };
    
    const index = blocks.findIndex(block => block.id === afterId);
    const newBlocks = [...blocks];
    newBlocks.splice(index + 1, 0, newBlock);
    setBlocks(newBlocks);
  };

  const addNewBlock = (type: BlockType) => {
    const newBlock: Block = {
      id: Date.now().toString(),
      type,
      content: '',
      level: type === 'heading' ? 1 : undefined,
    };
    setBlocks([...blocks, newBlock]);
  };

  const updateBlock = (id: string, updates: Partial<Block>) => {
    setBlocks(blocks.map(block => 
      block.id === id ? { ...block, ...updates } : block
    ));
  };

  const deleteBlock = (id: string) => {
    if (blocks.length > 1) {
      setBlocks(blocks.filter(block => block.id !== id));
    }
  };

  const handleSlashCommand = (blockId: string, position: { x: number; y: number }) => {
    setActiveBlockId(blockId);
    setMenuPosition(position);
    setShowSlashMenu(true);
  };

  const handleVariableMenu = (blockId: string, position: { x: number; y: number }) => {
    setActiveBlockId(blockId);
    setMenuPosition(position);
    setShowVariableMenu(true);
  };

  const handleSelectBlock = (type: BlockType) => {
    if (activeBlockId) {
      updateBlock(activeBlockId, { type, level: type === 'heading' ? 1 : undefined });
    }
    setShowSlashMenu(false);
    setActiveBlockId(null);
  };

  const handleSelectVariable = (variable: string) => {
    if (activeBlockId) {
      const block = blocks.find(b => b.id === activeBlockId);
      if (block) {
        updateBlock(activeBlockId, { content: block.content + `{{${variable}}}` });
      }
    }
    setShowVariableMenu(false);
    setActiveBlockId(null);
  };

  return (
    <DefaultPageLayout>
      <div className="container max-w-none flex w-full flex-col items-center gap-8 bg-neutral-50 py-12 pb-24 min-h-screen">
        <div className="flex w-full max-w-[1024px] items-center justify-between">
          <div className="flex items-center gap-4">
            <IconButton
              variant="neutral-tertiary"
              icon={<FeatherArrowLeft />}
              onClick={() => window.history.back()}
            />
            <span className="text-heading-2 font-heading-2 text-default-font">
              Define Content
            </span>
          </div>
          <div className="flex items-center gap-4">
            <AutoSaveIndicator 
              isSaving={isSaving}
              lastSaved={lastSaved}
              error={error}
            />
            <Button
              variant="neutral-secondary"
              onClick={() => {}}
            >
              Preview
            </Button>
          </div>
        </div>

        <div className="flex w-full max-w-[1024px] items-start gap-6">
          <div className="flex grow shrink-0 basis-0 flex-col gap-6 min-h-0">
            <div className="flex w-full flex-col gap-6 rounded-lg border border-solid border-neutral-border bg-default-background p-6">
              {/* Content Blocks */}
              <div className="flex flex-col gap-1">
                {blocks.map((block) => (
                  <BlockComponent
                    key={block.id}
                    block={block}
                    blocks={blocks}
                    onUpdate={updateBlock}
                    onDelete={deleteBlock}
                    onAddBlock={addBlock}
                    onShowSlashMenu={handleSlashCommand}
                    onShowVariableMenu={handleVariableMenu}
                    isActive={block.id === activeBlockId}
                  />
                ))}
                
                {/* Add Block Button */}
                {blocks.length === 0 && (
                  <div className="flex flex-col items-center gap-4 py-12">
                    <span className="text-body font-body text-subtext-color">
                      Start writing or add your first block
                    </span>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="neutral-secondary"
                        icon={<FeatherType />}
                        onClick={() => addNewBlock('text')}
                      >
                        Add Text
                      </Button>
                      <Button
                        variant="neutral-secondary"
                        icon={<FeatherHash />}
                        onClick={() => addNewBlock('heading')}
                      >
                        Add Header
                      </Button>
                      <Button
                        variant="neutral-secondary"
                        icon={<FeatherSparkles />}
                        onClick={() => addNewBlock('ai-prompt')}
                      >
                        Add AI Block
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          <div className="flex w-96 flex-none flex-col items-start gap-4">
            <div className="sticky top-6 flex w-full flex-col gap-4 rounded-lg border border-solid border-neutral-border bg-default-background p-6">
              <div className="flex items-center justify-between">
                <span className="text-heading-3 font-heading-3 text-default-font">
                  Slack Preview
                </span>
                <IconButton
                  size="small"
                  variant="neutral-tertiary"
                  icon={<FeatherEye />}
                  title="Preview mode"
                />
              </div>
              
              <div className="flex flex-col gap-3 rounded-lg border border-solid border-neutral-200 bg-white p-4 min-h-[400px]">
                {/* Slack message header */}
                <div className="flex items-center gap-2 pb-2 border-b border-neutral-100">
                  <div className="w-6 h-6 rounded bg-brand-500 flex items-center justify-center">
                    <span className="text-white text-caption font-caption-bold">S</span>
                  </div>
                  <span className="text-body-bold font-body-bold text-default-font">Signal Bot</span>
                  <span className="text-caption font-caption text-subtext-color">Today at 12:00 PM</span>
                </div>
                
                {/* Message content */}
                <div className="flex flex-col gap-2">
                  {blocks.map((block) => (
                    <div key={block.id}>
                      {block.type === 'heading' && block.content && (
                        <div className={`${block.level === 1 ? 'text-heading-3 font-heading-3' : block.level === 2 ? 'text-body-bold font-body-bold' : 'text-body-bold font-body-bold'} text-default-font`}>
                          {block.content}
                        </div>
                      )}
                      {block.type === 'text' && block.content && (
                        <div className="text-body font-body text-default-font whitespace-pre-wrap">
                          {block.content.replace(/\{\{(\w+)\}\}/g, (match, variable) => (
                            `*${variable.replace(/_/g, ' ')}*`
                          ))}
                        </div>
                      )}
                      {block.type === 'ai-prompt' && block.content && (
                        <div className="rounded border border-solid border-neutral-200 bg-neutral-50 p-3">
                          <div className="flex items-center gap-2 mb-2">
                            <FeatherCpu className="w-4 h-4 text-brand-600" />
                            <span className="text-caption-bold font-caption-bold text-brand-700">AI Generated</span>
                          </div>
                          <div className="text-body font-body text-neutral-700">
                            [Dynamic content will be generated based on: &quot;{block.content}&quot;]
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                  {blocks.length === 0 && (
                    <div className="text-center text-subtext-color text-body font-body py-8">
                      Add content blocks to see preview
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Slash Command Menu */}
        {showSlashMenu && (
          <SlashCommandMenu
            position={menuPosition}
            onSelectBlock={handleSelectBlock}
            onClose={() => setShowSlashMenu(false)}
          />
        )}

        {/* Variable Menu */}
        {showVariableMenu && (
          <VariableMenu
            position={menuPosition}
            onSelectVariable={handleSelectVariable}
            onClose={() => setShowVariableMenu(false)}
          />
        )}
      </div>
    </DefaultPageLayout>
  );
}